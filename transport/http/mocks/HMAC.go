// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	"errors"
	mock "github.com/stretchr/testify/mock"
)

// HMAC is an autogenerated mock type for the HMAC type
type HMAC struct {
	mock.Mock
}

// SignHMACSHA512 provides a mock function with given fields: text, key
func (_m *HMAC) SignHMACSHA512(text string, key string) (string, error) {
	if text == "" || key == "" {
		return "", errors.New("empty text or key")
	}
	ret := _m.Called(text, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(text, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(text, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(text, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHMAC interface {
	mock.TestingT
	Cleanup(func())
}

// NewHMAC creates a new instance of HMAC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHMAC(t mockConstructorTestingTNewHMAC) *HMAC {
	mock := &HMAC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
